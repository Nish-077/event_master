generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "mysql"
  url       = env("MYSQL_DATABASE_URL")
  directUrl = env("MYSQL_DATABASE_URL")
}

model admin {
  admin_id                    String                        @id @db.VarChar(20)
  first_name                  String                        @db.VarChar(20)
  last_name                   String                        @db.VarChar(20)
  email                       String                        @unique(map: "email") @db.VarChar(32)
  admin_approves_registration admin_approves_registration[]
  admin_assigns_speaker       admin_assigns_speaker[]
  admin_manages_event         admin_manages_event[]
  admin_monitors_dashboard    admin_monitors_dashboard[]
  admin_phone_no              admin_phone_no[]
}

model admin_approves_registration {
  admin_id        String       @db.VarChar(20)
  registration_id String       @db.VarChar(20)
  admin           admin        @relation(fields: [admin_id], references: [admin_id], onDelete: Cascade, onUpdate: NoAction, map: "admin_approves_registration_ibfk_3")
  registration    registration @relation(fields: [registration_id], references: [registration_id], onDelete: Cascade, onUpdate: NoAction, map: "admin_approves_registration_ibfk_4")

  @@id([admin_id, registration_id])
  @@index([registration_id], map: "registration_id")
}

model admin_assigns_speaker {
  admin_id   String  @db.VarChar(20)
  speaker_id String  @db.VarChar(20)
  admin      admin   @relation(fields: [admin_id], references: [admin_id], onDelete: Cascade, onUpdate: NoAction, map: "admin_assigns_speaker_ibfk_3")
  speaker    speaker @relation(fields: [speaker_id], references: [speaker_id], onDelete: Cascade, onUpdate: NoAction, map: "admin_assigns_speaker_ibfk_4")

  @@id([admin_id, speaker_id])
  @@index([speaker_id], map: "speaker_id")
}

model admin_manages_event {
  admin_id String @db.VarChar(20)
  event_id String @db.VarChar(20)
  admin    admin  @relation(fields: [admin_id], references: [admin_id], onDelete: Cascade, onUpdate: NoAction, map: "admin_manages_event_ibfk_3")
  event    event  @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "admin_manages_event_ibfk_4")

  @@id([admin_id, event_id])
  @@index([event_id], map: "event_id")
}

model admin_monitors_dashboard {
  admin_id     String    @db.VarChar(20)
  dashboard_id String    @db.VarChar(20)
  admin        admin     @relation(fields: [admin_id], references: [admin_id], onDelete: Cascade, onUpdate: NoAction, map: "admin_monitors_dashboard_ibfk_3")
  dashboard    dashboard @relation(fields: [dashboard_id], references: [dashboard_id], onDelete: Cascade, onUpdate: NoAction, map: "admin_monitors_dashboard_ibfk_4")

  @@id([admin_id, dashboard_id])
  @@index([dashboard_id], map: "dashboard_id")
}

model admin_phone_no {
  admin_id     String @db.VarChar(20)
  phone_number String @db.VarChar(20)
  admin        admin  @relation(fields: [admin_id], references: [admin_id], onDelete: Cascade, onUpdate: NoAction, map: "admin_phone_no_ibfk_2")

  @@id([admin_id, phone_number])
}

model dashboard {
  dashboard_id             String                     @id @db.VarChar(20)
  event_id                 String                     @db.VarChar(20)
  feedback_score           Decimal?                   @default(0.00) @db.Decimal(3, 2)
  attendance_count         Int?                       @default(0)
  admin_monitors_dashboard admin_monitors_dashboard[]
  event                    event                      @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "dashboard_ibfk_1")
  demographic_data         demographic_data[]

  @@index([event_id], map: "event_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model event {
  id                  String                @id @db.VarChar(20)
  title               String                @db.VarChar(32)
  date                DateTime              @db.Date
  time                DateTime              @db.Time(0)
  budget              Int?
  description         String?               @db.Text
  admin_manages_event admin_manages_event[]
  dashboard           dashboard[]
  event_agenda        event_agenda[]
  event_session       event_session[]
  organiser_for_event organiser_for_event[]
  registration        registration[]
}

model organiser {
  organiser_id        String                @id @db.VarChar(20)
  admin_id            String?               @db.VarChar(20)
  first_name          String                @db.VarChar(20)
  last_name           String?               @db.VarChar(20)
  email               String                @unique(map: "email") @db.VarChar(32)
  role                String                @db.VarChar(20)
  department          String?               @db.VarChar(32)
  organiser_for_event organiser_for_event[]
  organiser_phone_no  organiser_phone_no[]
  user                User[]
}

model organiser_for_event {
  organiser_id String    @db.VarChar(20)
  event_id     String    @db.VarChar(20)
  organiser    organiser @relation(fields: [organiser_id], references: [organiser_id], onDelete: Cascade, onUpdate: NoAction, map: "organiser_for_event_ibfk_1")
  event        event     @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "organiser_for_event_ibfk_2")

  @@id([organiser_id, event_id])
  @@index([event_id], map: "event_id")
}

model organiser_phone_no {
  organiser_id String    @db.VarChar(20)
  phone_number String    @db.VarChar(20)
  organiser    organiser @relation(fields: [organiser_id], references: [organiser_id], onDelete: Cascade, onUpdate: NoAction, map: "organiser_phone_no_ibfk_1")

  @@id([organiser_id, phone_number])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model participant {
  participant_id       String                 @id @db.VarChar(20)
  first_name           String                 @db.VarChar(20)
  last_name            String?                @db.VarChar(20)
  email                String                 @unique(map: "email") @db.VarChar(30)
  type                 participant_type
  address_id           String?                @db.VarChar(20)
  address              address?               @relation(fields: [address_id], references: [address_id], onUpdate: NoAction, map: "participant_ibfk_1")
  participant_phone_no participant_phone_no[]
  registration         registration[]
  user                 User[]

  @@index([address_id], map: "address_id")
}

model participant_phone_no {
  participant_id String      @db.VarChar(20)
  phone_number   String      @db.VarChar(15)
  participant    participant @relation(fields: [participant_id], references: [participant_id], onDelete: Cascade, onUpdate: NoAction, map: "participant_phone_no_ibfk_1")

  @@id([participant_id, phone_number])
}

model registration {
  registration_id             String                         @id @db.VarChar(20)
  participant_id              String?                        @db.VarChar(20)
  event_id                    String                         @db.VarChar(20)
  registration_date           DateTime                       @db.Date
  type                        registration_type
  registration_time           DateTime                       @db.Time(0)
  attendance_status           registration_attendance_status
  admin_approves_registration admin_approves_registration[]
  feedback                    feedback[]
  participant                 participant?                   @relation(fields: [participant_id], references: [participant_id], onDelete: NoAction, onUpdate: NoAction, map: "registration_ibfk_1")
  event                       event                          @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "registration_ibfk_2")

  @@unique([event_id, participant_id], map: "unique_event_participant")
  @@index([participant_id], map: "participant_id")
}

model session {
  userId     String       @map("user_id") @db.VarChar(20)
  created_at DateTime     @default(now()) @db.DateTime(0)
  id         String       @id @db.VarChar(64)
  expiresAt  DateTime     @db.DateTime(0)
  type       session_type
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "session_ibfk_1")

  @@index([userId], map: "user_id")
}

model speaker {
  speaker_id            String                  @id @db.VarChar(20)
  first_name            String                  @db.VarChar(20)
  last_name             String?                 @db.VarChar(20)
  email                 String                  @unique(map: "email") @db.VarChar(30)
  bio                   String?                 @db.Text
  admin_assigns_speaker admin_assigns_speaker[]
  speaker_expertise     speaker_expertise[]
  speaker_for_session   speaker_for_session[]
  speaker_phone_no      speaker_phone_no[]
  user                  User[]
}

model speaker_expertise {
  speaker_id String  @db.VarChar(20)
  expertise  String  @db.VarChar(30)
  speaker    speaker @relation(fields: [speaker_id], references: [speaker_id], onDelete: Cascade, onUpdate: NoAction, map: "speaker_expertise_ibfk_1")

  @@id([speaker_id, expertise])
}

model speaker_for_session {
  speaker_id String        @db.VarChar(20)
  session_id String        @db.VarChar(20)
  event_id   String        @db.VarChar(20)
  speaker    speaker       @relation(fields: [speaker_id], references: [speaker_id], onDelete: Cascade, onUpdate: NoAction, map: "speaker_for_session_ibfk_1")
  session    event_session @relation(fields: [session_id, event_id], references: [event_session_id, event_id], onDelete: Cascade, onUpdate: NoAction, map: "speaker_for_session_ibfk_2")

  @@id([speaker_id, session_id, event_id])
  @@index([session_id, event_id], map: "session_id")
}

model speaker_phone_no {
  speaker_id   String  @db.VarChar(20)
  phone_number String  @db.VarChar(20)
  speaker      speaker @relation(fields: [speaker_id], references: [speaker_id], onDelete: Cascade, onUpdate: NoAction, map: "speaker_phone_no_ibfk_1")

  @@id([speaker_id, phone_number])
}

model feedback {
  feedback_id     String        @id @db.VarChar(20)
  registration_id String?       @db.VarChar(20)
  feedback_date   DateTime      @db.Date
  rating          Int?
  comments        String?       @db.Text
  registration    registration? @relation(fields: [registration_id], references: [registration_id], map: "feedback_ibfk_1")

  @@index([registration_id], map: "registration_id")
}

model User {
  email          String       @db.VarChar(32)
  password       String       @db.VarChar(40)
  created_at     DateTime     @default(now()) @db.DateTime(0)
  id             String       @id @db.VarChar(20)
  participant_id String?      @db.VarChar(20)
  organiser_id   String?      @db.VarChar(20)
  speaker_id     String?      @db.VarChar(20)
  session        session[]
  participant    participant? @relation(fields: [participant_id], references: [participant_id], onUpdate: NoAction, map: "user_ibfk_1")
  organiser      organiser?   @relation(fields: [organiser_id], references: [organiser_id], onUpdate: NoAction, map: "user_ibfk_2")
  speaker        speaker?     @relation(fields: [speaker_id], references: [speaker_id], onUpdate: NoAction, map: "user_ibfk_3")

  @@index([organiser_id], map: "organiser_id")
  @@index([participant_id], map: "participant_id")
  @@index([speaker_id], map: "speaker_id")
  @@map("user")
}

model event_session {
  event_session_id    String                @db.VarChar(20)
  event_id            String                @db.VarChar(20)
  topic               String                @db.VarChar(100)
  building            String                @db.VarChar(20)
  room_no             String                @db.VarChar(10)
  start_time          DateTime              @db.Time(0)
  end_time            DateTime              @db.Time(0)
  event               event                 @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "event_session_ibfk_1")
  speaker_for_session speaker_for_session[]

  @@id([event_session_id, event_id])
  @@index([event_id], map: "event_id")
}

model event_agenda {
  agenda_id String @id @db.VarChar(20)
  event_id  String @db.VarChar(20)
  item      String @db.Text
  event     event  @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "event_agenda_ibfk_1")

  @@index([event_id], map: "idx_event_agenda_event_id")
}

model address {
  address_id  String        @id @db.VarChar(20)
  street      String        @db.Text
  postal_code String        @db.Char(6)
  city_id     String?       @db.VarChar(20)
  city        city?         @relation(fields: [city_id], references: [city_id], onDelete: Cascade, onUpdate: NoAction, map: "address_ibfk_1")
  participant participant[]

  @@index([city_id], map: "city_id")
}

model city {
  city_id   String    @id @db.VarChar(20)
  city_name String    @db.VarChar(50)
  state_id  String?   @db.VarChar(20)
  address   address[]
  state     state?    @relation(fields: [state_id], references: [state_id], onDelete: Cascade, onUpdate: NoAction, map: "city_ibfk_1")

  @@index([state_id], map: "state_id")
}

model demographic_data {
  demographic_id String     @id @db.VarChar(20)
  dashboard_id   String?    @db.VarChar(20)
  category       String     @db.VarChar(50)
  value          String     @db.VarChar(50)
  count          Int
  dashboard      dashboard? @relation(fields: [dashboard_id], references: [dashboard_id], onDelete: Cascade, onUpdate: NoAction, map: "demographic_data_ibfk_1")

  @@index([dashboard_id], map: "dashboard_id")
}

model state {
  state_id   String @id @db.VarChar(20)
  state_name String @db.VarChar(50)
  city       city[]
}

enum registration_attendance_status {
  Attended
  Absent
}

enum participant_type {
  Student
  Faculty
  External
}

enum registration_type {
  Early_Bird @map("Early Bird")
  Standard
  VIP
}

enum session_type {
  Participant
  Organiser
  Speaker
}
